@model Gemini.Models._04_Crm.CrmEmailSettingModel
@{
    Layout = "~/Views/Shared/_FormList.cshtml";
}

@Html.Action("AToolbarItem", "Nav")


<div class="k-edit-form-container" style="overflow-x: hidden; ">
    <form method="post" id="frmEdit" class="form-horizontal" role="form">
        <div id="Tabs">
            <ul>
                <li class="k-state-active">
                    @Html.Label(@Gemini.Resources.Resource.LBasic)
                </li>
            </ul>

            <div>
                <div style="height: 0; overflow: hidden">
                    @Html.HiddenFor(model => model.Guid)
                    @Html.HiddenFor(model => model.IsUpdate)
                    <input type="hidden" id="hfLuuvathem" value="0" /><input type="hidden" id="hfExpand" value="0" />
                    <button type="submit" id="btnLuu" style="visibility: hidden"></button>
                </div>
                <div class="form-group">
                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.Email)
                    </div>
                    <div class="col-sm-4 col-md-4">
                        @Html.TextBoxFor(model => model.Email, new { @class = "k-input k-textbox" })
                        <div>@Html.ValidationMessageFor(model => model.Email)</div>
                    </div>

                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.PassEmail)
                    </div>
                    <div class="col-sm-4 col-md-4">
                        @Html.TextBoxFor(model => model.PassEmail, new { @class = "k-input k-textbox", @type = "password" })
                        <div>@Html.ValidationMessageFor(model => model.PassEmail)</div>
                    </div>
                </div>

                <div class="form-group">

                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.Smtp)
                    </div>
                    <div class="col-sm-4 col-md-4">
                        @Html.TextBoxFor(model => model.Smtp, new { @class = "k-input k-textbox" })
                        <div>@Html.ValidationMessageFor(model => model.Smtp)</div>
                    </div>
                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.Port)
                    </div>
                    <div class="col-sm-4 col-md-4">
                        @Html.Kendo().NumericTextBoxFor(model => model.Port).HtmlAttributes(new { style = "width:100%;" }).Format("n0")
                        <div>@Html.ValidationMessageFor(model => model.Port)</div>
                    </div>


                </div>

                <div class="form-group">
                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.EnableSsl)
                    </div>
                    <div class="col-sm-4 col-md-4">
                        @Html.CheckBoxFor(model => model.EnableSsl)
                        <div>@Html.ValidationMessageFor(model => model.EnableSsl)</div>
                    </div>
                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.IsHtml)
                    </div>
                    <div class="col-sm-4 col-md-4">
                        @Html.CheckBoxFor(model => model.IsHtml)
                        <div>@Html.ValidationMessageFor(model => model.IsHtml)</div>
                    </div>

                </div>

                <div class="form-group">

                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.DelayTime)
                    </div>
                    <div class="col-sm-4 col-md-4">
                        @Html.Kendo().NumericTextBoxFor(model => model.DelayTime).HtmlAttributes(new { style = "width:100%;" }).Format("n0")
                        <div>@Html.ValidationMessageFor(model => model.DelayTime)</div>
                    </div>

                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.Active)
                    </div>
                    <div class="col-sm-4 col-md-4">
                        @Html.CheckBoxFor(model => model.Active)
                        <div>@Html.ValidationMessageFor(model => model.Active)</div>
                    </div>

                </div>


                <div class="form-group">
                    <div class="col-sm-2 col-md-2">
                        @Html.LabelFor(m => m.Note)
                    </div>
                    <div class="col-sm-10 col-md-10">
                        @Html.TextAreaFor(model => model.Note, new { @class = "k-textbox", rows = "5" })
                        <div>@Html.ValidationMessageFor(model => model.Note)</div>
                    </div>

                </div>



            </div>

        </div>
    </form>
</div>

<script>
    //Form submit
    var validator = $("#frmEdit").kendoValidator().data("kendoValidator");
    $("form").submit(function (event) {
        if (validator.validate() == true) {
            kendo.ui.progress(parent.$("#WidgetConfigWindow"), true);
            var frm = $('#frmEdit');
          $.post('@Url.Action("Update", "CrmEmailSetting")', frm.serialize(), function (dataResponse) {
                kendo.ui.progress(parent.$("#WidgetConfigWindow"), false);
                if (dataResponse.StatusCode == 200) {
                    parent.voidRefresh();
                    parent.ActiveRow(dataResponse.ActiveCode);
                    if (parseInt($("#hfLuuvathem").val()) == 0) {
                        closeWindowEdit();
                    } else {
                        parent.Create('0');
                    }
                } else {
                   Notification('@Gemini.Resources.Resource.EditUnsuccessful', dataResponse.StatusCode, dataResponse.MessagError, '@Gemini.Resources.Resource.ListStatusNotificationError', true);
                }
            }).fail(function (xhr, status, error) {
                Notification('@Gemini.Resources.Resource.ListUnsuccessful', '@Gemini.Resources.Resource.ListStatus404', error, '@Gemini.Resources.Resource.ListStatusNotificationError', true);
            });
        }
        event.preventDefault();
    });


    function closeWindowEdit() {
        var window = parent.$("#WidgetConfigWindow").data("kendoWindow");
        window.close();
    }

    function voidDeleteItem() {
        parent.Delete();
        closeWindowEdit();
    }

    function voidRefreshItem() {
        if (parseInt($("#IsUpdate").val()) == 0) {
            parent.Create('0');
        } else if (parseInt($("#IsUpdate").val()) == 1) {
            parent.Edit('1');
        }
    }
    ToolbarItem_Click();
    KendoTabStrip();
    //Enter text box
    PreventEventTextSubmit();
    //Phím tắt
    KeyboardNavigationEdit();
</script>
