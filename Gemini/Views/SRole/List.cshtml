@{
    Layout = "~/Views/Shared/_FormList.cshtml";
    int gridPageSize = ViewBag.Pagesize;
}

<style>
    .k-pane.k-scrollable {
        height: 100% !important;
    }

    .k-splitbar.k-state-default.k-splitbar-horizontal.k-splitbar-draggable-horizontal {
        height: 100% !important;
    }
</style>

@(Html.Kendo().Splitter()
              .Name("splitter")
              .Orientation(SplitterOrientation.Horizontal)
              .Panes(panes =>
              {
                  panes.Add().MinSize("30%").HtmlAttributes(new { style = "overflow: hidden" }).Content(@<div>
                    @Rendergrid()
                </div>);
                        panes.Add().MinSize("30%").HtmlAttributes(new { style = "overflow: hidden" }).Content(@<div>
                            @Rendergridtabc1()
                        </div>);
                            }))

@helper Rendergrid()
    {
        int gridPageSize = ViewBag.Pagesize;
        <div style="width:98%">
            @*Menu main*@
            @Html.Action("AToolbar", "Nav")
            @*Grid main*@
            <div>
                @(Html.Kendo().Grid<Gemini.Models._01_Hethong.SRoleModel>()
                    .Name("grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Name).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                        columns.Bound(p => p.Active).Width(90).Filterable(false).ClientTemplate("# if (Active == true) { #" + "<span class=\"k-icon k-i-tick\"></span>" + "# } #").HtmlAttributes(new { @class = "grid-center" });
                        columns.Bound(p => p.Note).Width(160).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                        columns.Bound(p => p.UpdatedAt).Width(160).Format(@Gemini.Resources.Resource.ListFormatDatetime).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                        columns.Bound(p => p.UpdatedBy).Width(130).Filterable(true).Sortable(false).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                        columns.Bound(p => p.CreatedAt).Width(160).Format(@Gemini.Resources.Resource.ListFormatDatetime).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                        columns.Bound(p => p.CreatedBy).Width(160).Filterable(true).Sortable(false).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Template(@<text>

                        </text>);
                    })
                .Pageable(pageable => pageable.PageSizes(new[] { 100, 200, 500, 1000 }).ButtonCount(gridPageSize)
                .Messages(messages => messages.ItemsPerPage(@Gemini.Resources.Resource.ListItemsPerPage)))
                .Sortable()
                .Scrollable()
                .Selectable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                .Navigatable()
                .Resizable(resize => resize.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                .ServerOperation(false)
                .Model(model => model.Id(p => p.Guid))
                .Read(read => read.Action("Read", "SRole"))
                .PageSize(gridPageSize)
                .Batch(false)
                .AutoSync(false)
                )
                .Events(e => e.DataBound("grid_DataBound").Change("grid_Change"))
                )
            </div>
        </div>
}

@helper Rendergridtabc1()
    {
        int gridPageSize = ViewBag.Pagesize;
        @*Menu Tabc*@
        @*Grid Tabc1*@
        <div id="TabsChild">
            <ul>
                <li class="k-state-active">@Html.Label(@Gemini.Resources.Resource.ListTitleControl)</li>
                <li>@Html.Label(@Gemini.Resources.Resource.ListTitleMenu)</li>
            </ul>
            <div>
                @(Html.Kendo().Grid<Gemini.Models._01_Hethong.SControlModel>()
                                                      .Name("gridTabc1")
                                                      .Columns(columns =>
                                                      {
                                                          columns.Bound(p => p.Name).Width(60)
                                                              .ClientTemplate("# if (IsRole == true) { #" + "<input class='chkbox' type='checkbox' checked/>" + "# } else { #" + "<input class='chkbox' type='checkbox'/>" + "# } #").Filterable(false).HeaderTemplate("<input type='checkbox' id='selectAll'  onclick='checkall()' />").Sortable(false);
                                                          columns.Bound(p => p.Name).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                                                          columns.Bound(p => p.Active).Width(90).Filterable(false).ClientTemplate("# if (Active == true) { #" + "<span class=\"k-icon k-i-tick\"></span>" + "# } #").HtmlAttributes(new { @class = "grid-center" });
                                                          columns.Bound(p => p.Note).Width(160).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                                                          columns.Bound(p => p.UpdatedAt).Width(160).Format(@Gemini.Resources.Resource.ListFormatDatetime).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                                                          columns.Bound(p => p.UpdatedBy).Width(130).Filterable(true).Sortable(false).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                                                          columns.Bound(p => p.CreatedAt).Width(160).Format(@Gemini.Resources.Resource.ListFormatDatetime).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                                                          columns.Bound(p => p.CreatedBy).Width(160).Filterable(true).Sortable(false).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));

                                                      }).ToolBar(toolbar =>
                                                      {
                                                          toolbar.Template(@<text>
                                                            <div class="form-horizontal toolbar">
                                                                <div class="row">
                                                                    <div class="col-md-3">
                                                                        <button class="k-button" id="btnSaveControl" onclick="SaveControl()"><i class="glyphicon glyphicon-log-out"></i> Save Control </button>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                        </text>);
                                                    })
                                          .Editable(editable => editable.Mode(GridEditMode.PopUp)) // Use inline editing mode
                                          .Pageable(pageable => pageable.PageSizes(new[] { 5, 10, 20, 50, 100, 200, 500, 1000 }).ButtonCount(gridPageSize)
                                          .Messages(messages => messages.ItemsPerPage(@Gemini.Resources.Resource.ListItemsPerPage)))
                                          .Sortable()
                                          .Scrollable()
                                          .Selectable()
                                          .Navigatable()
                                          .Resizable(resize => resize.Columns(true))
                                          .DataSource(dataSource =>
                                              dataSource.Ajax().ServerOperation(false)
                                            .Model(model => model.Id(p => p.Guid))
                                            .Read(read => read.Action("ReadTabc1", "SRole")) // Action invoked when the grid needs data
                                            .PageSize(gridPageSize)
                                          )
                )
            </div>
            <div>
                @(Html.Kendo().Grid<Gemini.Models._01_Hethong.SMenuModel>()
                                                      .Name("gridTabc2")
                                                      .Columns(columns =>
                                                      {
                                                          columns.Bound(p => p.Name).Width(60)
                                                              .ClientTemplate("# if (IsRoleMenu == true) { #" + "<input class='chkboxMenu' type='checkbox' checked/>" + "# } else { #" + "<input class='chkboxMenu' type='checkbox'/>" + "# } #").Filterable(false).HeaderTemplate("<input type='checkbox' id='selectAllMenu'  onclick='checkallMenu()' />").Sortable(false);
                                                          columns.Bound(p => p.Name).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                                                          columns.Bound(p => p.Active).Width(90).Filterable(false).ClientTemplate("# if (Active == true) { #" + "<span class=\"k-icon k-i-tick\"></span>" + "# } #").HtmlAttributes(new { @class = "grid-center" });
                                                          columns.Bound(p => p.Note).Width(160).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                                                          columns.Bound(p => p.UpdatedAt).Width(160).Format(@Gemini.Resources.Resource.ListFormatDatetime).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                                                          columns.Bound(p => p.UpdatedBy).Width(130).Filterable(true).Sortable(false).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                                                          columns.Bound(p => p.CreatedAt).Width(160).Format(@Gemini.Resources.Resource.ListFormatDatetime).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                                                          columns.Bound(p => p.CreatedBy).Width(160).Filterable(true).Sortable(false).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));

                                                      }).ToolBar(toolbar =>
                                                      {
                                                          toolbar.Template(@<text>
                                                            <div class="form-horizontal toolbar">
                                                                <div class="row">
                                                                    <div class="col-md-3">
                                                                        <button class="k-button" id="btnSaveMenu" onclick="SaveMenu()"><i class="glyphicon glyphicon-log-out"></i> Save Menu </button>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                        </text>);
                                                    })
                                          .Editable(editable => editable.Mode(GridEditMode.PopUp)) // Use inline editing mode
                                          .Pageable(pageable => pageable.PageSizes(new[] { 5, 10, 20, 50, 100, 200, 500, 1000 }).ButtonCount(gridPageSize)
                                          .Messages(messages => messages.ItemsPerPage(@Gemini.Resources.Resource.ListItemsPerPage)))
                                          .Sortable()
                                          .Scrollable()
                                          .Selectable()
                                          .Navigatable()
                                          .Resizable(resize => resize.Columns(true))
                                          .DataSource(dataSource =>
                                              dataSource.Ajax().ServerOperation(false)
                                            .Model(model => model.Id(p => p.Guid))
                                            .Read(read => read.Action("ReadTabc2", "SRole")) // Action invoked when the grid needs data
                                            .PageSize(gridPageSize)
                                          ).Events(e => e.DataBound("grid_DataBoundTabc1"))
                )
            </div>
        </div>
}

@*Bound*@
        <script>
    var __IdCode = 0;
    function grid_DataBound() {
        var idCode = __IdCode;
        var grid = $("#grid").data("kendoGrid");
        var data = grid.dataSource.data();
        var totalNumber = data.length;
        var pageSize = grid.dataSource._pageSize;
        var index = 0;
        var row;
        for (var i = 0; i < totalNumber; i++) {
            row = data[i];
            if (row.Guid == idCode) {
                index = i + 1;
                var model = grid.dataSource.get(idCode);
                var row1 = $("#grid").find("tbody>tr[data-uid=" + model.uid + "]");
                grid.select(row1);
                break;
            }
        }
        if (totalNumber > pageSize) {
            var cpage = this.dataSource.page();
            var page = Math.floor(index / pageSize);
            if ((index % pageSize) != 0) {
                page = page + 1;
            }

            if (cpage != page && page != 0) {
                grid.dataSource.page(page);
            }
        }
        if (idCode == "") {
            var tpage = Math.floor(totalNumber / pageSize);
            if ((totalNumber % pageSize) != 0) {
                tpage = Math.floor(totalNumber / pageSize) + 1;
            }
            if (tpage < cpage && tpage != 0) {
                grid.dataSource.page(tpage);
            }
            row = grid.tbody.find(">tr:not(.k-grouping-row)").eq(0);
            grid.select(row);
        }

        __IdCode = 0;
        if (index != 0) {
            var scrollContentOffset = this.element.find("tbody").offset().top;
            var selectContentOffset = this.select().offset().top;
            var distance = selectContentOffset - scrollContentOffset;

            this.element.find(".k-grid-content").animate({
                scrollTop: distance
            }, 400);
        }
    }

    var __IdCodeTabc1 = "";
    function grid_DataBoundTabc1() {
        var idCode = __IdCodeTabc1;
        var grid = $("#gridTabc2").data("kendoGrid");
        var data = grid.dataSource.data();
        var totalNumber = data.length;
        var pageSize = grid.dataSource._pageSize;
        var index = 0;
        var row;
        for (var i = 0; i < totalNumber; i++) {
            row = data[i];
            if (row.Guid == idCode) {
                index = i + 1;
                var model = grid.dataSource.get(idCode);
                var row1 = $("#gridTabc2").find("tbody>tr[data-uid=" + model.uid + "]");
                grid.select(row1);
                break;
            }
        }
        if (totalNumber > pageSize) {
            var cpage = this.dataSource.page();
            var page = Math.floor(index / pageSize);
            if ((index % pageSize) != 0) {
                page = page + 1;
            }

            if (cpage != page && page != 0) {
                grid.dataSource.page(page);
            }
        }
        if (idCode == "") {
            var tpage = Math.floor(totalNumber / pageSize);
            if ((totalNumber % pageSize) != 0) {
                tpage = Math.floor(totalNumber / pageSize) + 1;
            }
            if (tpage < cpage && tpage != 0) {
                grid.dataSource.page(tpage);
            }
            row = grid.tbody.find(">tr:not(.k-grouping-row)").eq(0);
            grid.select(row);
        }

        __IdCodeTabc1 = 0;
        if (index != 0) {
            var scrollContentOffset = this.element.find("tbody").offset().top;
            var selectContentOffset = this.select().offset().top;
            var distance = selectContentOffset - scrollContentOffset;

            this.element.find(".k-grid-content").animate({
                scrollTop: distance
            }, 400);
        }
    }

    function ActiveRow(idCode) {
        __IdCode = idCode;
    }

    function voidRefresh() {
        LoadDataFind();
    }

    function LoadDataFind() {
        $("#grid").data("kendoGrid").dataSource.read({});
    }
    function LoadTabc1() {
        $("#gridTabc1").data("kendoGrid").dataSource.read({ Guid: getDataItem().Guid, textSearch: $("#txtSearchc").val() });
    }
    function LoadTabc2() {
        $("#gridTabc2").data("kendoGrid").dataSource.read({ Guid: getDataItem().Guid, textSearch: $("#txtSearchc").val() });
    }

    function grid_Change() {
        kendo.ui.progress($("#splitter"), true);
        var dataItem = this.dataItem(this.select());
        if (dataItem != null) {
            Id = dataItem.Id;
            LoadTabc1();
            LoadTabc2();
            kendo.ui.progress($("#splitter"), false);
        }
    }

    function checkall() {
        var cbox = document.getElementsByClassName("chkbox");
        if ($("#selectAll").is(":checked") === true) {
            for (var i = 0; i < cbox.length; i++){
                if (cbox[i].type == 'checkbox')
                    cbox[i].checked = true;
            }
        } else {
            for (var i = 0; i < cbox.length; i++){
                if (cbox[i].type == 'checkbox')
                    cbox[i].checked = false;
            }
        }
    }

    function checkallMenu() {
        var cbox = document.getElementsByClassName("chkboxMenu");
        if ($("#selectAllMenu").is(":checked") === true) {
            for (var i = 0; i < cbox.length; i++){
                if (cbox[i].type == 'checkbox')
                    cbox[i].checked = true;
            }
        } else {
            for (var i = 0; i < cbox.length; i++){
                if (cbox[i].type == 'checkbox')
                    cbox[i].checked = false;
            }
        }
    }

    var idsCheckedControl = "";
    var idsCheckedMenu = "";

    function rowCheck() {
        var grid = $("#gridTabc1").data("kendoGrid");
        var ds = grid.dataSource.view();
        idsCheckedControl = "";
        for (var i = 0; i < ds.length; i++) {
            var row = grid.table.find("tr[data-uid='" + ds[i].uid + "']");
            var checkbox = $(row).find(".chkbox");
            if (checkbox.is(":checked")) {
                idsCheckedControl = idsCheckedControl + ds[i].Guid + ";";
            }
        }
    }

    function SaveControl() {
        rowCheck();
        var conf = confirm('Bạn có muốn lưu không ?');
        if (conf) {
            kendo.ui.progress($("#splitter"), true);
            var cacheGuidRole = getDataItem().Guid;
            $.post('@Url.Action("SaveControls", "SRole")', { controlCodes: idsCheckedControl, guidRole: getDataItem().Guid}, function (dataResponse) {
                kendo.ui.progress($("#splitter"), false);
                if (dataResponse.StatusCode == 200) {
                    voidRefresh();
                    ActiveRow(cacheGuidRole);
                } else {
                    Notification('@Gemini.Resources.Resource.ListUnsuccessful', dataResponse.StatusCode, dataResponse.MessagError, '@Gemini.Resources.Resource.ListStatusNotificationError');
                }
            }).fail(function (xhr, status, error) {
                kendo.ui.progress($("#splitter"), false);
                Notification('@Gemini.Resources.Resource.ListUnsuccessful', '@Gemini.Resources.Resource.ListStatus404', error, '@Gemini.Resources.Resource.ListStatusNotificationError');
            });
        }
    };

    var Id = "";
    function rowCheckMenu() {
        var grid = $("#gridTabc2").data("kendoGrid");
        var ds = grid.dataSource.view();
        idsCheckedMenu = "";
        for (var i = 0; i < ds.length; i++) {
            var row = grid.table.find("tr[data-uid='" + ds[i].uid + "']");
            var checkbox = $(row).find(".chkboxMenu");
            if (checkbox.is(":checked")) {
                idsCheckedMenu = idsCheckedMenu + ds[i].Guid + ";";
            }
        }
    }

    function SaveMenu() {
        rowCheckMenu();
        var conf = confirm('Bạn có muốn lưu không ?');
            if (conf) {
            kendo.ui.progress($("#splitter"), true);
            var cacheGuidRole = getDataItem().Guid;
            $.post('@Url.Action("SaveMenus", "SRole")', { menuCodes: idsCheckedMenu, guidRole: cacheGuidRole}, function (dataResponse) {
                kendo.ui.progress($("#splitter"), false);
                if (dataResponse.StatusCode == 200) {
                    voidRefresh();
                    ActiveRow(cacheGuidRole);
                } else {
                }
            }).fail(function (xhr, status, error) {
                kendo.ui.progress($("#splitter"), false);
                Notification('@Gemini.Resources.Resource.ListUnsuccessful', '@Gemini.Resources.Resource.ListStatus404', error, '@Gemini.Resources.Resource.ListStatusNotificationError');
            });
        }
    };

        </script>



@*div Main*@
<div>
    @(Html.Kendo().Window()
          .Name("WidgetConfigWindow")
          .Title(@Gemini.Resources.Resource.Menu_MetaTitle)
          .Iframe(true)
          .Events(ev => ev.Open(@"function(f){
if(window.loaded){
this.refresh();
}
window.loaded = true;
}"))
          .Animation(true)
          .Resizable()
          .Draggable()
          .Width(850).Height(400)
          .Actions(actions => actions.Pin().Minimize().Maximize().Close())
          .HtmlAttributes(new { style = "marign:0;padding:0;overflow:hidden" })
          .Visible(false)
          .Modal(true)
          )
</div>

@*CED Main*@
<script>
    window.onresize = function (event) {
        $("#splitter").height($(window).innerHeight() - 10);        //Đặt độ cao cho grid
        GridHeight("grid");
        GridHeightTab("gridTabc1", 0);
        GridHeightTab("gridTabc2", 0);
        $("#grid").data("kendoGrid").table.focus();
    };
    $(document).ready(function () {
        $("#splitter").height($(window).innerHeight() - 10);        //Đặt độ cao cho grid
        GridHeight("grid");
        GridHeightTab("gridTabc1", 0);
        GridHeightTab("gridTabc2", 0);
        $("#grid").data("kendoGrid").table.focus();
    });

    Toolbar_Click();
    function getDataItem() {
        var grid = $("#grid").data("kendoGrid");
        if (grid.select().length > 0) {
            var dataItem = grid.dataItem(grid.select());
            if (dataItem) {
                return dataItem;
            }
        }
        return null;
    }

    function Create() {
        var windowWidget = $("#WidgetConfigWindow").data("kendoWindow").title("Role");
        windowWidget.refresh({
            url: "@Url.Action("Create", "SRole")"
        });
        windowWidget.center();
        windowWidget.open();
    }
    function Edit() {
        if (getDataItem()) {
            var windowWidget = $("#WidgetConfigWindow").data("kendoWindow").title("Role");
            windowWidget.refresh({
                url: '@Url.Action("Edit", "SRole")?guid=' + getDataItem().Guid + ''
            });
            windowWidget.center();
            windowWidget.open();
        } else {
            Notification('@Gemini.Resources.Resource.ListNoItemsSelected', '', '@Gemini.Resources.Resource.ListNoItemsSelected', '@Gemini.Resources.Resource.ListStatusNotificationInfo');
        }
    }
    function Delete() {
        if (getDataItem()) {
            var conf = confirm('@Html.Raw(Gemini.Resources.Resource.ListConfirmDelete)');
            if (conf) {
                $.get('@Url.Action("Delete", "SRole")', { guid: getDataItem().Guid }, function (dataResponse) {
                    if (dataResponse.StatusCode == 200) {
                        voidRefresh(); ActiveRow(0);
                    } else {
                        Notification('@Gemini.Resources.Resource.ListUnsuccessful', dataResponse.StatusCode, dataResponse.MessagError, '@Gemini.Resources.Resource.ListStatusNotificationError');
                    }
                }).fail(function (xhr, status, error) {
                    Notification('@Gemini.Resources.Resource.ListUnsuccessful', '@Gemini.Resources.Resource.ListStatus404', error, '@Gemini.Resources.Resource.ListStatusNotificationError');
                });
            }
        } else {
            Notification('@Gemini.Resources.Resource.ListNoItemsSelected', '', '@Gemini.Resources.Resource.ListNoItemsSelected', '@Gemini.Resources.Resource.ListStatusNotificationInfo');
        }

    }
    function Copy() {
        if (getDataItem()) {
            var conf = confirm('@Html.Raw(Gemini.Resources.Resource.ListConfirmCopy)');
            if (conf == true) {
               $.get('@Url.Action("Copy", "SRole")', { guid: getDataItem().Guid }, function (dataResponse) {
                    switch (parseInt(dataResponse.StatusCode)) {
                        case 200:
                            {
                                voidRefresh(); ActiveRow(dataResponse.ActiveCode);break;
                            }
                        default:
                            {Notification('@Gemini.Resources.Resource.ListUnsuccessful', dataResponse.StatusCode, dataResponse.MessagError, '@Gemini.Resources.Resource.ListStatusNotificationError');
                                break;
                            }
                    }
                }).fail(function (xhr, status, error) {
                    Notification('@Gemini.Resources.Resource.ListUnsuccessful', '@Gemini.Resources.Resource.ListStatus404', error, '@Gemini.Resources.Resource.ListStatusNotificationError');
                });
            }
        } else {
            Notification('@Gemini.Resources.Resource.ListNoItemsSelected', '', '@Gemini.Resources.Resource.ListNoItemsSelected', '@Gemini.Resources.Resource.ListStatusNotificationInfo');
        }
    }

    $(document).ready(function () {
        //TabsChild
        $("#TabsChild").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
        });

    });

</script>
